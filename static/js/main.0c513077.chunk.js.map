{"version":3,"sources":["components/Uploader/UploadCSV.js","components/Rank Table/RankTable.js","context/AuthContext.js","containers/Layout.js","components/Modal/Modal.js","components/Auth/Auth.js","App.js","serviceWorker.js","index.js"],"names":["DropzoneAreaExample","props","state","files","this","setState","file","reader","FileReader","onload","csv","parse","result","err","data","internList","i","length","name","username","email","points","newUser","Number","push","console","log","Axios","put","readAsBinaryString","Fragment","acceptedFiles","onDrop","handleChange","bind","Component","Leaderboard","React","useState","dataState","setDataState","useEffect","styledInterns","fetchedInterns","get","then","response","sort","a","b","map","intern","index","position","style","color","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","onRowUpdate","oldData","indexOf","onRowDelete","splice","padding","title","columns","field","headerStyle","textAlign","cellStyle","maxWidth","width","options","rowStyle","borderRadius","boxShadow","pageSizeOptions","pageSize","sorting","isAuth","AuthContext","createContext","login","AuthContextProvider","isAuthenticated","setIsAuthenticated","Provider","value","children","Layout","classes","makeStyles","theme","base","flexGrow","useStyles","marginBottom","className","AppBar","Toolbar","Typography","variant","Button","onClick","clicked","Modal","Dialog","onClose","modalClose","aria-labelledby","open","Auth","authContext","useContext","App","setOpen","modalCloser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8ZAwDeA,E,kDAlDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHO,E,yDAMLA,GACXC,KAAKC,SAAS,CACZF,MAAOA,IAGT,IAAIG,EAAOH,EAAM,GAEXI,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdC,IAAIC,MAAMJ,EAAOK,QAAQ,SAACC,EAAKC,GAI7B,IAFA,IAAIC,EAAa,GAERC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAAK,CACpC,IAAME,EAAOJ,EAAKE,GAAG,GACfG,EAAWL,EAAKE,GAAG,GACnBI,EAAQN,EAAKE,GAAG,GAChBK,EAASP,EAAKE,GAAG,GACjBM,EAAU,CAAE,KAAQJ,EAAM,SAAYC,EAAU,MAASC,EAAO,OAAUG,OAAOF,IACvFN,EAAWS,KAAKF,GAIhBG,QAAQC,IAAIX,GAEdY,IAAMC,IAAI,sDAAV,eAAqEb,QAIzER,EAAOsB,mBAAmBvB,K,+BAI1B,OAAQ,kBAAC,IAAMwB,SAAP,KACX,yDACO,kBAAC,IAAD,CAAcC,cAAe,CAAC,QAC9BC,OAAQ5B,KAAK6B,aAAaC,KAAK9B,a,GA3CL+B,a,2BCsHnBC,EAtHK,SAACnC,GAAW,IAAD,EACKoC,IAAMC,SAAS,CAC/CxB,KAAM,KAFqB,mBACtByB,EADsB,KACXC,EADW,KAK3BH,IAAMI,WAAU,WACZ,IACIC,EADAC,EAAiB,GAEvBhB,IAAMiB,IAAI,wEACLC,MACG,SAAAC,GACIrB,QAAQC,IAAIoB,EAAShC,OACrB6B,EAAiBG,EAAShC,MACXiC,MAAK,SAACC,EAAGC,GACtB,OAAOA,EAAE5B,OAAS2B,EAAE3B,UAEtBqB,EAAgBC,EAAeO,KAAI,SAACC,EAAQC,GACxC,OAAY,IAARA,EAAkB,2BAAKD,GAAZ,IAAoBE,SAAUD,EAAQ,EAAGE,MAAM,CAACC,MAAO,UACpE,2BAAKJ,GAAZ,IAAoBE,SAAUD,EAAQ,OAErCZ,EAAa,CAAC1B,KAAM4B,SAK/B,IAIH,IA0BMc,EAAW,CACbC,SAAU,SAACC,GAAD,OACR,IAAIC,SAAQ,SAACC,GACXC,YAAW,WACTD,IACApB,GAAa,SAACsB,GACZ,IAAMhD,EAAI,YAAOgD,EAAUhD,MAE3B,OADAA,EAAKU,KAAKkC,GACH,2BAAKI,GAAZ,IAAuBhD,cAExB,SAEPiD,YAAa,SAACL,EAASM,GAAV,OACX,IAAIL,SAAQ,SAACC,GACXC,YAAW,WACTD,IACII,GACFxB,GAAa,SAACsB,GACZ,IAAMhD,EAAI,YAAOgD,EAAUhD,MAE3B,OADAA,EAAKA,EAAKmD,QAAQD,IAAYN,EACvB,2BAAKI,GAAZ,IAAuBhD,cAG1B,SAEPoD,YAAa,SAACF,GAAD,OACX,IAAIL,SAAQ,SAACC,GACTC,YAAW,WAEXD,IACApB,GAAa,SAACsB,GACZ,IAAMhD,EAAI,YAAOgD,EAAUhD,MAE3B,OADAA,EAAKqD,OAAOrD,EAAKmD,QAAQD,GAAU,GAC5B,2BAAKF,GAAZ,IAAuBhD,cAExB,UAIb,OACE,kBAAC,IAAD,CAAewC,MAAO,CAACc,QAAQ,QAC7BC,MAAM,YACNC,QApEc,CACZ,CACID,MAAO,WAAYE,MAAO,WAAYC,YAAY,CAACC,UAAW,UAAWC,UAAW,CAEhFC,SAAU,KACVC,MAAO,KACPH,UAAW,WAEvB,CAAEJ,MAAO,OAAQE,MAAO,OAAUG,UAAW,CACzCE,MAAM,QAEV,CAAEP,MAAO,WAAYE,MAAO,YACzB,CAAEF,MAAO,QAASE,MAAO,SACzB,CAAEF,MAAO,SAAUE,MAAO,SAAUG,UAAW,CAE9CC,SAAU,KACVC,MAAO,QAqDL9D,KAAMyB,EAAUzB,KAEhB+D,QAAS,CACPC,SAAU,CACNV,QAAS,OACTW,aAAc,MACdC,UAAW,uCAIbC,gBAAiB,CAAC,GAAI,GAAI,IAC1BC,SAAU,GACVC,SAAS,GAGjB3B,SAAUvD,EAAMmF,OAAQ5B,EAAS,QCpH1B6B,G,OAAchD,IAAMiD,cAAc,CAC3CF,QAAQ,EACRG,MAAO,gBAiBIC,EAda,SAAAvF,GAAU,IAAD,EACaqC,oBAAS,GADtB,mBAC1BmD,EAD0B,KACTC,EADS,KAMjC,OAAQ,kBAACL,EAAYM,SAAb,CAAsBC,MAAO,CACjCR,OAAQK,EACRF,MANiB,WACjBG,GAAmB,MAOlBzF,EAAM4F,W,4CCsCAC,EAnDA,SAAA7F,GAGf,IAYQ8F,EAZUC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACAC,SAAU,GAIhB9B,MAAO,CACL8B,SAAU,MAKIC,GAKV,OACI,6BACK,yBAAK9C,MAAO,CAAC+C,aAAa,OAAQC,UAAWP,EAAQG,MAChE,kBAACK,EAAA,EAAD,CAAQlD,SAAS,UACf,kBAACmD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,UAAWP,EAAQ1B,OAA5C,qBAGA,kBAACsC,EAAA,EAAD,CAAQC,QAAS3G,EAAM4G,QAAStD,MAAM,WAAtC,YAIM,8BAIHtD,EAAM4F,Y,SCjCNiB,EAAQ,SAAC7G,GAEpB,OACE,kBAAC8G,EAAA,EAAD,CAAQC,QAAS/G,EAAMgH,WAAYC,kBAAgB,sBAAsBC,KAAMlH,EAAMkH,MACpFlH,EAAM4F,WCeIuB,G,OApBF,SAAAnH,GAEX,IAAMoH,EAAcC,qBAAWjC,GAO/B,OACE,yBAAKiB,UAAU,QAEX,0DACA,yDACA,kBAACK,EAAA,EAAD,CAAQC,QAXS,WAEjBS,EAAY9B,QACZtF,EAAMgH,cAQyBP,QAAQ,YAAYnD,MAAM,WAAzD,aCoBOgE,EA5BH,SAACtH,GACX,IAAMoH,EAAchF,IAAMiF,WAAWjC,GADhB,EAGGhD,IAAMC,UAAS,GAHlB,mBAGd6E,EAHc,KAGRK,EAHQ,KAQfC,EAAc,WAClBD,GAAQ,IAGV,OACE,kBAAC,EAAD,CAAQX,QARU,WAClBW,GAAQ,KAQR,kBAAC,EAAD,CAAOL,KAAMA,EAAMF,WAAYQ,GAAa,kBAAC,EAAD,CAAMR,WAAYQ,KAEhE,yBAAKnB,UAAU,OACVe,EAAYjC,OAAQ,kBAAC,EAAD,MAAc,KACjC,kBAAC,EAAD,CAAaA,OAAQiC,EAAYjC,YClBrBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxF,MAAK,SAAAyF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhH,QAAQgH,MAAMA,EAAMC,c","file":"static/js/main.0c513077.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport { DropzoneArea } from 'material-ui-dropzone'\r\nimport csv from 'csv';\r\nimport Axios from 'axios';\r\n\r\nclass DropzoneAreaExample extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      files: []\r\n    };\r\n  }\r\n  handleChange(files){\r\n    this.setState({\r\n      files: files\r\n    });\r\n      \r\n    var file = files[0];\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n\r\n        var internList = [];\r\n\r\n        for (var i = 1; i < data.length; i++) {\r\n          const name = data[i][0];\r\n          const username = data[i][1];\r\n          const email = data[i][2];\r\n          const points = data[i][3];\r\n          const newUser = { \"name\": name, \"username\": username, \"email\": email, \"points\": Number(points) };\r\n          internList.push(newUser);\r\n\r\n         \r\n          };\r\n          console.log(internList)\r\n\r\n        Axios.put('https://hngi7-leaderboard.firebaseio.com/users.json', {...internList })\r\n      });\r\n    };\r\n\r\n    reader.readAsBinaryString(file);\r\n      \r\n  }\r\n  render(){\r\n    return (<React.Fragment>\r\n <h3>Upload the CSV file below</h3>\r\n        <DropzoneArea acceptedFiles={[\".csv\"]}\r\n        onDrop={this.handleChange.bind(this)}\r\n        />\r\n    </React.Fragment>\r\n     \r\n    )\r\n  }\r\n}\r\n\r\nexport default DropzoneAreaExample;","import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Axios from 'axios'\r\n\r\n\r\nconst Leaderboard = (props) => {\r\n  const [dataState, setDataState] = React.useState({\r\n    data: [ ],\r\n  });\r\n    \r\n    React.useEffect(() => {\r\n        let fetchedInterns = [];\r\n        let styledInterns;\r\n      Axios.get('https://hngi7-leaderboard.firebaseio.com/users.json?orderBy=\"points\"')\r\n          .then(\r\n              response => {\r\n                  console.log(response.data)\r\n                  fetchedInterns = response.data;\r\n                  fetchedInterns.sort((a, b) => {\r\n                    return b.points - a.points;\r\n                  });\r\n                  styledInterns = fetchedInterns.map((intern, index) => {\r\n                      if (index===0){return { ...intern, position: index + 1, style:{color: 'blue'} } }\r\n                 return { ...intern, position: index + 1, }\r\n             })\r\n                  setDataState({data: styledInterns})\r\n\r\n\r\n          }\r\n      )\r\n    }, [])  \r\n    \r\n\r\n    \r\n    const columns = [\r\n        {\r\n            title: 'Position', field: 'position', headerStyle:{textAlign: 'center'}, cellStyle: {\r\n           \r\n                maxWidth: '3%',\r\n                width: '3%',\r\n                textAlign: 'center',\r\n          },},\r\n    { title: 'Name', field: 'name',   cellStyle: {\r\n        width:'30%'\r\n      },},\r\n    { title: 'Username', field: 'username' },\r\n       { title: 'Email', field: 'email'},\r\n       { title: 'Points', field: 'points', cellStyle: {\r\n           \r\n        maxWidth: '3%',\r\n        width: '3%',\r\n      \r\n  }},\r\n    // {\r\n    //   title: 'track', field: 'track',\r\n    //   lookup: { 1: 'Frontend', 2: 'Backend' , 3: 'Design',  4: 'Mobile' },\r\n    //    },\r\n      \r\n    ]\r\n    \r\n    const editable = {\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setDataState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.push(newData);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              if (oldData) {\r\n                setDataState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data[data.indexOf(oldData)] = newData;\r\n                  return { ...prevState, data };\r\n                });\r\n              }\r\n            }, 600);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                \r\n              resolve();\r\n              setDataState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.splice(data.indexOf(oldData), 1);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n      }\r\n\r\n  return (\r\n    <MaterialTable style={{padding:'10px'}}\r\n      title=\"The Board\"\r\n      columns={columns}\r\n          data={dataState.data}\r\n\r\n          options={{\r\n            rowStyle: {\r\n                padding: '1rem',\r\n                borderRadius: '5px',\r\n                boxShadow: ' 0 2.8px 2.2px rgba(0, 0, 0, 0.034)',\r\n               \r\n              \r\n              },\r\n              pageSizeOptions: [10, 20, 30],\r\n              pageSize: 10,\r\n              sorting: false,\r\n          }}\r\n         \r\n      editable={props.isAuth? editable:null}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Leaderboard","import React,{useState} from 'react';\r\n\r\nexport const AuthContext = React.createContext({\r\n    isAuth: false,\r\n    login: () => { },\r\n});\r\n\r\nconst AuthContextProvider = props => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const loginHandler = () => {\r\n        setIsAuthenticated(true)\r\n    }\r\n\r\n    return (<AuthContext.Provider value={{\r\n        isAuth: isAuthenticated,\r\n        login: loginHandler,\r\n    }}>\r\n        {props.children}\r\n    </AuthContext.Provider>)\r\n}\r\n\r\nexport default AuthContextProvider\r\n\r\n","import React from 'react';\r\nimport {AppBar,Toolbar,Typography, Button} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst Layout = props => {\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  base: {\r\n        flexGrow: 1,\r\n     \r\n  },\r\n\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n \r\n\r\n\r\n        return (\r\n            <div>\r\n                 <div style={{marginBottom:'5px'}} className={classes.base}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            HNGi7 LeaderBoard\r\n          </Typography>\r\n          <Button onClick={props.clicked} color=\"inherit\">Admin</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n                <main\r\n                  //  className={classes.Content}\r\n                >\r\n\r\n            {props.children}\r\n            </main>\r\n        \r\n            </div>\r\n              \r\n          \r\n\r\n        )\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Layout","\r\nimport React from 'react';\r\n\r\nimport { Dialog } from '@material-ui/core'\r\n\r\n\r\n\r\nexport const Modal = (props) => { \r\n \r\n  return (\r\n    <Dialog onClose={props.modalClose} aria-labelledby=\"simple-dialog-title\" open={props.open}>\r\n    {props.children}\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n// SimpleDialog.propTypes = {\r\n//   onClose: PropTypes.func.isRequired,\r\n//   open: PropTypes.bool.isRequired,\r\n//   selectedValue: PropTypes.string.isRequired,\r\n// };\r\n\r\n","import React, { useContext } from 'react';\r\nimport {Button} from '@material-ui/core'\r\n\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport './Auth.css';\r\n\r\nconst Auth = props => {\r\n\r\n  const authContext = useContext(AuthContext);\r\n    const loginHandler = () => {\r\n        \r\n        authContext.login();\r\n        props.modalClose();\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth\">\r\n    \r\n        <h2>You are not authenticated!</h2>\r\n        <p>Please log in to continue.</p>\r\n        <Button onClick={loginHandler} variant=\"contained\" color=\"primary\">Log In</Button>\r\n  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;","import React from 'react';\nimport Uploader from './components/Uploader/UploadCSV'\nimport Leaderboard from './components/Rank Table/RankTable'\nimport  './App.css'\nimport { AuthContext } from './context/AuthContext'\nimport Layout from './containers/Layout'\nimport { Modal } from './components/Modal/Modal'\nimport Auth from './components/Auth/Auth'\n\n\n\n\nconst App = (props) => {\n  const authContext = React.useContext(AuthContext);\n\n  const [open, setOpen] = React.useState(false)\n  \n const modalToggler = () => {\n    setOpen(true)\n }\n  const modalCloser = () => {\n    setOpen(false)\n  }\n\n  return (\n    <Layout clicked={modalToggler}>\n    <Modal open={open} modalClose={modalCloser}><Auth modalClose={modalCloser} /></Modal>\n    \n  <div className=\"App\">\n      {authContext.isAuth? <Uploader />: null }\n        <Leaderboard isAuth={authContext.isAuth}/>\n      \n    </div>\n    </Layout>\n  \n   \n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AuthContextProvider from './context/AuthContext';\nimport './index.css'\n\nReactDOM.render(\n  <AuthContextProvider>\n    <App />\n  </AuthContextProvider>,\n \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}